using GraphiGrade.Business.Authorization;
using GraphiGrade.Business.ServiceModels;
using GraphiGrade.Business.ServiceModels.Factories;
using GraphiGrade.Business.Services.Abstractions;
using GraphiGrade.Contracts.DTOs;
using GraphiGrade.Contracts.DTOs.Exercise.Requests;
using GraphiGrade.Contracts.DTOs.Exercise.Responses;
using GraphiGrade.Contracts.DTOs.Submission.Requests;
using GraphiGrade.Contracts.DTOs.Submission.Responses;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Net;

namespace GraphiGrade.Web.Controllers;

/// <summary>
/// TODO: Check properly the submission/exercise flow (with image generated by the OpenGL script and not paint).
/// TODO: 
/// </summary>

[ApiController]
[Route("api/[controller]")]
public class ExerciseController : ControllerBase
{
    private readonly IAuthorizationService _authorizationService;
    private readonly IExerciseService _exerciseService;
    private readonly ISubmissionService _submissionService;
    private readonly IUserResolverService _userResolverService;

    public ExerciseController(
        IAuthorizationService authorizationService, 
        IExerciseService exerciseService, 
        ISubmissionService submissionService,
        IUserResolverService userResolverService)
    {
        _authorizationService = authorizationService;
        _exerciseService = exerciseService;
        _submissionService = submissionService;
        _userResolverService = userResolverService;
    }

    [HttpPost]
    [ProducesResponseType<CreateExerciseResponse>(StatusCodes.Status200OK, "application/json")]
    [ProducesResponseType<ErrorResponse>(StatusCodes.Status403Forbidden, "application/json")]
    [ProducesResponseType<ErrorResponse>(StatusCodes.Status404NotFound, "application/json")]
    [ProducesResponseType<ErrorResponse>(StatusCodes.Status500InternalServerError, "application/json")]
    public async Task<IActionResult> CreateExerciseAsync(CreateExerciseRequest request, CancellationToken cancellationToken)
    {
        AuthorizationResult authResult = await _authorizationService.AuthorizeAsync(
            User,
            Policy.Admin);
        
        if (!authResult.Succeeded)
        {
            return new ObjectResult(ErrorResponseFactory.CreateError(HttpStatusCode.Forbidden))
            {
                StatusCode = (int)HttpStatusCode.Forbidden
            };
        }

        if (!_userResolverService.Resolve(User))
        {
            return new ObjectResult(ErrorResponseFactory.CreateError(HttpStatusCode.Forbidden))
            {
                StatusCode = (int)HttpStatusCode.Forbidden
            };
        }

        ServiceResult<CreateExerciseResponse> response = await _exerciseService.CreateExerciseAsync(request, cancellationToken);

        if (response.IsError)
        {
            return new ObjectResult(response.Error)
            {
                StatusCode = (int)response.Error!.ErrorCode
            };
        }

        return Ok(response.Result);
    }

    [HttpGet]
    [Route("{id}")]
    [ProducesResponseType<GetExerciseResponse>(StatusCodes.Status200OK, "application/json")]
    [ProducesResponseType<ErrorResponse>(StatusCodes.Status403Forbidden, "application/json")]
    [ProducesResponseType<ErrorResponse>(StatusCodes.Status404NotFound, "application/json")]
    [ProducesResponseType<ErrorResponse>(StatusCodes.Status500InternalServerError, "application/json")]
    public async Task<IActionResult> GetExerciseByIdAsync(int id, CancellationToken cancellationToken)
    {
        if (id <= 0)
        {
            return new ObjectResult(ErrorResponseFactory.CreateError(HttpStatusCode.BadRequest))
            {
                StatusCode = (int)HttpStatusCode.BadRequest
            };
        }
        
        var adminCheck = await _authorizationService.AuthorizeAsync(User, Policy.Admin);
        var memberCheck = await _authorizationService.AuthorizeAsync(User, id, Policy.UserHasExercise);

        if (!adminCheck.Succeeded && !memberCheck.Succeeded)
        {
            return new ObjectResult(ErrorResponseFactory.CreateError(HttpStatusCode.Forbidden))
            {
                StatusCode = (int)HttpStatusCode.Forbidden
            };
        }
        
        if (!_userResolverService.Resolve(User))
        {
            return new ObjectResult(ErrorResponseFactory.CreateError(HttpStatusCode.Forbidden))
            {
                StatusCode = (int)HttpStatusCode.Forbidden
            };
        }

        ServiceResult<GetExerciseResponse> response = await _exerciseService.GetExerciseByIdAsync(id, cancellationToken);

        if (response.IsError)
        {
            return new ObjectResult(response.Error)
            {
                StatusCode = (int)response.Error!.ErrorCode
            };
        }

        return Ok(response.Result);
    }

    [HttpPost]
    [Route("{id}/submit")]
    [ProducesResponseType<SubmitSolutionResponse>(StatusCodes.Status200OK, "application/json")]
    [ProducesResponseType<ErrorResponse>(StatusCodes.Status400BadRequest, "application/json")]
    [ProducesResponseType<ErrorResponse>(StatusCodes.Status403Forbidden, "application/json")]
    [ProducesResponseType<ErrorResponse>(StatusCodes.Status404NotFound, "application/json")]
    [ProducesResponseType<ErrorResponse>(StatusCodes.Status500InternalServerError, "application/json")]
    public async Task<IActionResult> SubmitSolutionAsync(int id, SubmitSolutionRequest request, CancellationToken cancellationToken)
    {
        if (id <= 0)
        {
            return new ObjectResult(ErrorResponseFactory.CreateError(HttpStatusCode.BadRequest))
            {
                StatusCode = (int)HttpStatusCode.BadRequest
            };
        }

        var adminCheck = await _authorizationService.AuthorizeAsync(User, Policy.Admin);
        var memberCheck = await _authorizationService.AuthorizeAsync(User, id, Policy.UserHasExercise);

        if (!adminCheck.Succeeded && !memberCheck.Succeeded)
        {
            return new ObjectResult(ErrorResponseFactory.CreateError(HttpStatusCode.Forbidden))
            {
                StatusCode = (int)HttpStatusCode.Forbidden
            };
        }

        if (!_userResolverService.Resolve(User))
        {
            return new ObjectResult(ErrorResponseFactory.CreateError(HttpStatusCode.Forbidden))
            {
                StatusCode = (int)HttpStatusCode.Forbidden
            };
        }

        ServiceResult<SubmitSolutionResponse> response = await _submissionService.SubmitSolutionAsync(id, request, cancellationToken);

        if (response.IsError)
        {
            return new ObjectResult(response.Error)
            {
                StatusCode = (int)response.Error!.ErrorCode
            };
        }

        return Ok(response.Result);
    }
}
