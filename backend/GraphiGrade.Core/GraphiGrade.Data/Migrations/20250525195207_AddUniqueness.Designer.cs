// <auto-generated />
using System;
using GraphiGrade.Data.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraphiGrade.Migrations
{
    [DbContext(typeof(GraphiGradeDbContext))]
    [Migration("20250525195207_AddUniqueness")]
    partial class AddUniqueness
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GraphiGrade.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ExpectedImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ExpectedImageId");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("GraphiGrade.Models.ExercisesGroups", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ExercisesGroups");
                });

            modelBuilder.Entity("GraphiGrade.Models.FileMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("StorageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("FileMetadata");
                });

            modelBuilder.Entity("GraphiGrade.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("GraphiGrade.Models.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("ErrorCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<string>("JudgeId")
                        .IsRequired()
                        .HasColumnType("CHAR(36)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ResultImageId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Score")
                        .HasColumnType("DECIMAL(3,2)");

                    b.Property<int>("SourceCodeId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("JudgeId")
                        .IsUnique();

                    b.HasIndex("ResultImageId");

                    b.HasIndex("SourceCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("Submission");
                });

            modelBuilder.Entity("GraphiGrade.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("CHAR(64)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("GraphiGrade.Models.UsersGroups", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UsersGroups");
                });

            modelBuilder.Entity("GraphiGrade.Models.Exercise", b =>
                {
                    b.HasOne("GraphiGrade.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GraphiGrade.Models.FileMetadata", "ExpectedImage")
                        .WithMany("ExercisesAsExpectedImage")
                        .HasForeignKey("ExpectedImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ExpectedImage");
                });

            modelBuilder.Entity("GraphiGrade.Models.ExercisesGroups", b =>
                {
                    b.HasOne("GraphiGrade.Models.Exercise", "Exercise")
                        .WithMany("ExercisesGroups")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphiGrade.Models.Group", "Group")
                        .WithMany("ExercisesGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("GraphiGrade.Models.Submission", b =>
                {
                    b.HasOne("GraphiGrade.Models.Exercise", "Exercise")
                        .WithMany("Submissions")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphiGrade.Models.FileMetadata", "ResultImage")
                        .WithMany("SubmissionsResultImage")
                        .HasForeignKey("ResultImageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GraphiGrade.Models.FileMetadata", "SourceCode")
                        .WithMany("SubmissionsSourceCode")
                        .HasForeignKey("SourceCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GraphiGrade.Models.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("ResultImage");

                    b.Navigation("SourceCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GraphiGrade.Models.UsersGroups", b =>
                {
                    b.HasOne("GraphiGrade.Models.Group", "Group")
                        .WithMany("UsersGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphiGrade.Models.User", "User")
                        .WithMany("UsersGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GraphiGrade.Models.Exercise", b =>
                {
                    b.Navigation("ExercisesGroups");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("GraphiGrade.Models.FileMetadata", b =>
                {
                    b.Navigation("ExercisesAsExpectedImage");

                    b.Navigation("SubmissionsResultImage");

                    b.Navigation("SubmissionsSourceCode");
                });

            modelBuilder.Entity("GraphiGrade.Models.Group", b =>
                {
                    b.Navigation("ExercisesGroups");

                    b.Navigation("UsersGroups");
                });

            modelBuilder.Entity("GraphiGrade.Models.User", b =>
                {
                    b.Navigation("Submissions");

                    b.Navigation("UsersGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
